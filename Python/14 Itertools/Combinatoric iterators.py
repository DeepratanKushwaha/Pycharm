"""
The recursive generators that are used to simply combinatoric constructs such as permutation, combination,
cartesian product are called combinatoric iterators.
"""
# 4 types

# 1. product() :- this tool computes the cartesian product of input iterable.
#                 To compute the product of an iterable with itself, we use the optional repeat keyword argument to
#                 specify the number of repetitions. Output of this function are tuple in sorted order.


from itertools import product

print("Cartesian product using repeat: ")
print(list(product((1, 2), repeat=2)))

print("Cartesian product of the containers: ")
print(list(product(['geeks', 'for', 'geeks'], '2')))

print("The cartesian product of the containers: ")
print(list(product('AB', [3, 4])))

print("The cartesian product of the containers: ")
print(list(product([1, 2], [3, 4])))

# 2. permutations() :- it is used to generate the all possible permutations of an iterable. All element are treated as
#                      unique based on their position and not their value. This function takes an iterable and group-
#                      size, if the value of group size is not specified or is equal to none than the value of group
#                      size becomes length of iterator

from itertools import permutations

print('All permutations of given list is : ')
print(list(permutations([1, 2], 2)))

print('All permutations of given list is : ')
print(list(permutations([1, 2, 3], 3)))

print('All permutations of given list is : ')
print(list(permutations('AB')))

print('All permutations of given list is : ')
print(list(permutations([1, 'geeks'], 2)))

print('All permutations of given container is : ')
print(list(permutations(range(3), 2)))

print('All permutations of given container is : ')
print(list(permutations(range(3), 3)))

# 3. combinations() :- this iterator prints all the possible combinations(without replacement) of the container passed
#                      in argument in the specified group size in sorted order.

from itertools import combinations

print("All the combinations of the list in sorted order(without replacement): ")
print(list(combinations(['A', 2], 2)))

print("All the combinations of the list in sorted order(without replacement): ")
print(list(combinations('AB', 2)))

print("All the combinations of the container in sorted order(without replacement): ")
print(list(combinations(range(2), 1)))

print("All the combinations of the container in sorted order(without replacement): ")
print(list(combinations(range(3), 3)))

print("All the combinations of the list in sorted order(without replacement): ")
print(list(combinations([1, 2, 3], 2)))

a = [1, 1, 3, 3, 3]
print("All the combinations of the list in sorted order(without replacement): ")
print(list(combinations(a, 4)))

# 4. combination_with_replacement() :- this function returns a subsequence of length n from the element of the iterable
#                                      where n is the argument that the function takes determining the length of the
#                                      subsequences generated by the function. Individual elements may repeat it self
#                                      in combinations_with_replacement function.

from itertools import combinations_with_replacement

print("All the combination of string in sorted order(with replacement) is: ")
print(list(combinations_with_replacement("AB", 2)))

print("All the combination of string in sorted order(with replacement) is: ")
print(list(combinations_with_replacement("ABC", 2)))

print('All the combination of list in sorted order(with replacement) is: ')
print(list(combinations_with_replacement([1, 2], 2)))

print('All the combination of list in sorted order(with replacement) is: ')
print(list(combinations_with_replacement([1, 2, 3], 2)))

print('All the combination of list in sorted order(with replacement) is: ')
print(list(combinations_with_replacement([1, 2], 4)))

print('All the combination of container in sorted order(with replacement) is: ')
print(list(combinations_with_replacement(range(2), 2)))
